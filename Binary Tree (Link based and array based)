#!/bin/python3

"""LINK BASED BINARY TREE"""
class BinaryTreeNode:
    def __init__(self, key=None, value=None):
        self.key = key
        self.value = value
        self.left = None
        self.right = None
        self.parent = None

class BinarySearchTree:
    def __init__(self):
        self.root = None
        self.size = 0

    def insert(self, key, value):
        new_node = BinaryTreeNode(key, value)
        x = self.root
        y = None
        while x:
            y = x
            if key < y.key:
                x = x.left
            else:
                x = x.right
        if not y:
            self.root = new_node
        else:
            if key < y.key:
                y.left = new_node
            else:
                y.right = new_node
        self.size += 1

    def search(self, key):
        return self.searchrecur(self.root, key)

    def searchrecur(self, node, key):
        if not node or node.key == key:
            return node
        elif key < node.key:
            return self.searchrecur(node.left, key)
        else:
            return self.searchrecur(node.right, key)

    def __len__(self):
        return self.size

    def root(self):
        return self.root

    """MIN"""
    def TreeMin(self):
        if self.size == 0:
            return None
        else:
            node = self.root
            while node.left:
                node = node.left
            return node.key

    """MAX"""
    def TreeMax(self):
        if self.size == 0:
            return None
        else:
            node = self.root
            while node.right:
                node = node.right
            return node.key

    def printTreePreOrder(self, node):
        print(node.key)
        if node.left:

            self.printTreePreOrder(node.left)
        if node.right:
            self.printTreePreOrder(node.right)

    def printTreeInOrder(self, node):
        if node.left:
            self.printTreeInOrder(node.left)
        print(node.key)
        if node.right:
            self.printTreeInOrder(node.right)
            
    def successor(self, node):
        if node.right:
            node = node.right
            while node.left:
                node = node.left
        else:
            while node != node.parent.left:
                node = node.parent
            node = node.parent
        return node

    def Delete(self, node):
        z = self.Finder(node)
        
        if not z.left or not z.right:
            y = z
        else:
            y = self.successor(z)

        if y.left:
            x = y.left
        else:
            x = y.right

        if x:
            x.parent = y.parent
            
        if not y.parent:
            self.root = x
        else:
            if y == y.parent.left:
                y.parent.left = x
            else:
                y.parent.right = x
                
        if y != z:
            z.key, y.key = y.key, z.key
            
        return y
    
"""ARRAY BASED BINARY TREE"""
class BinarySearchTreeList:
    def __init__(self):
        self.tree = []
        self.size = 0

    def checker(self, i, value):
        if value > self.tree[i]:
            if len(self.tree) <= 2*i+2:
                for x in range(len(self.tree), 2*i+3):
                    self.tree.append(0)
                self.tree[2*i+2] += value
            elif self.tree[2*i+2] == 0:
                self.tree[2*i+2] += value
            else:
                self.checker(2*i+2, value)
        if value < self.tree[i]:
            if len(self.tree) <= 2*i+1:
                for x in range(len(self.tree), 2*i+2):
                    self.tree.append(0)
                self.tree[2*i+1] += value
            elif self.tree[2*i+1] == 0:
                self.tree[2*i+1] += value
            else:
                self.checker(2*i+1, value)

    def insert(self, value):
        if self.size == 0:
            self.tree.append(value)
        else:
            i = 0
            self.checker(i, value)
        self.size += 1
