#!/bin/python3

import requests
from bs4 import BeautifulSoup
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import TimeoutException
from openpyxl import load_workbook


def append_df_excel(df, file, date):
    book = load_workbook(f'/Users/arslanamir/PycharmProjects/{file}.xlsx')
    writer = pd.ExcelWriter(f'/Users/arslanamir/PycharmProjects/{file}.xlsx', engine='openpyxl')
    writer.book = book
    writer.sheets = {ws.title: ws for ws in book.worksheets}
    if date in writer.sheets:
        df.to_excel(writer, sheet_name=date, startrow=writer.sheets[date].max_row, header=False)
    if date not in writer.sheets:
        df.to_excel(writer, sheet_name=date)
    writer.save()


def nba_scraper():
    url = 'https://www.basketball-reference.com/leagues/NBA_2022_totals.html#totals_stats::pts'
    maxp = 550
    r = requests.get(url)
    soup = BeautifulSoup(r.content, 'html.parser')
    parsed_table = soup.find_all('table')[-1]

    df = []

    for i, row in enumerate(parsed_table.find_all('tr')[1:]):
        if i % 10 == 0:
            print(i, end=' ')
        if i >= maxp:
            print('\nComplete.')
            break
        try:
            dat = row.find('td', attrs={'data-stat': 'player'})
            name = dat.a.get_text()
            print(name)
            stub = dat.a.get('href')
            stub = stub[:-5] + '/gamelog/2022'
            try:
                tdf = pd.read_html('https://www.basketball-reference.com' + stub)[-1]
                tdf.columns = tdf.columns.get_level_values(-1)

                tdf = tdf.iloc[:, [6, 10, 11, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27]]
                tdf = tdf.drop(tdf[(tdf['FG'] == 'Inactive') | (tdf['FG'] == 'Did Not Play') |
                                   (tdf['FG'] == 'Did Not Dress') | (tdf['FG'] == 'Not With Team') |
                                   (tdf['FG'] == 'Player Suspended') | (tdf['FG'] == 'FG')].index)
                try:
                    tdf.drop(20, inplace=True)
                except KeyError:
                    pass
                df.append(tdf)
                tdf['Name'] = name
            except ValueError:
                pass

        except AttributeError:
            pass

    df = pd.concat(df)
    print(df)

    # noinspection PyTypeChecker
    df.to_csv('/Users/arslanamir/PycharmProjects/nba.csv', index=False)


def fanduel_scraper(date, file='nba_bets'):
    bets, count = 0, 0
    picks = {}
    s = Service('/usr/local/bin/chromedriver')
    driver = webdriver.Chrome(service=s)
    url = 'https://sportsbook.fanduel.com/navigation/nba'
    driver.get(url)
    games = WebDriverWait(driver, 5).until(
        EC.visibility_of_all_elements_located((By.PARTIAL_LINK_TEXT, "More wagers")))
    cats = {'Points': 'PTS', 'Rebounds': 'TRB', 'Assists': 'AST', 'Threes': '3P', 'Combos': 'Combos' }
    for cat in cats:
        for i in range(len(games)):
            try:
                WebDriverWait(driver, 5).until(EC.element_to_be_clickable((games[i]))).click()
            except IndexError:
                pass
            try:
                WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, f"//*[contains(text(),'{cat}')]"))).click()
            except TimeoutException:
                driver.get(url)
                games = WebDriverWait(driver, 5).until(
                    EC.presence_of_all_elements_located((By.PARTIAL_LINK_TEXT, "More wagers")))
                continue
            try:
                WebDriverWait(driver, 1).until(
                    EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Show more')]"))).click()
            except TimeoutException:
                pass
            if cat == 'Combos':
                combos = {'Player Pts + Ast': ['PTS', 'AST'], 'Player Pts + Reb': ['PTS', 'TRB'],
                          'Player Reb + Ast': ['TRB', 'AST'], 'Player Pts + Reb + Ast': ['PTS', 'TRB', 'AST']}
                # Initial click to close first combo
                waiter = WebDriverWait(driver, 2).until(
                    EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Player Pts')]")))
                driver.execute_script("arguments[0].click();", waiter)
                length_combo_props = driver.find_elements(
                    By.XPATH, "//span[contains(text(), '+') and contains(text(), 'Player')]")

                for z in range(len(length_combo_props)):
                    driver.execute_script("arguments[0].click();", length_combo_props[z])
                    length_names = driver.find_elements(By.XPATH, "//span[text()='UNDER']//following::div[1]/*")
                    specific_combos = combos[length_combo_props[z].text]
                    player_looper(length_names, driver, cats, count, cat, picks, bets, specific_combos)
                    driver.execute_script("arguments[0].click();", length_combo_props[z])

            else:
                length_names = driver.find_elements(By.XPATH, "//span[text()='UNDER']//following::div[1]/*")
                player_looper(length_names, driver, cats, count, cat, picks, bets)

            driver.get(url)
            games = WebDriverWait(driver, 5).until(
                EC.presence_of_all_elements_located((By.PARTIAL_LINK_TEXT, "More wagers")))
    print(f'Bets placed: {bets} out of {count} possible')
    printout = pd.DataFrame.from_dict(picks).T
    printout.columns = ['Name', 'O/U', 'Strike', 'Odds', 'Median', 'Cat']
    # noinspection PyTypeChecker
    append_df_excel(printout, file, date)


def stat_checker(name, cat):
    sheet = pd.read_csv('/Users/arslanamir/PycharmProjects/nba.csv')
    sheet = sheet[sheet['Name'] == f'{name}']
    return sheet[f'{cat}'].median()


def stat_checker_combos(name, specific_combos):
    sheet = pd.read_csv('/Users/arslanamir/PycharmProjects/nba.csv')
    sheet = sheet[sheet['Name'] == f'{name}']
    sum = 0
    for cat in specific_combos:
        sum += sheet[cat].median()
    return sum


def player_looper(length, driver, cats, count, cat, picks, bets, specific_combos=''):
    for y in range(1, len(length) + 1):
        name = WebDriverWait(driver, 20).until(
            EC.visibility_of_element_located
            ((By.XPATH, f"//span[text()='UNDER']//following::div[1]/div[{y}]//span")))
        print(name.text, cat)
        count += 1
        try:
            parent_name = name.find_element(By.XPATH, './/parent::div')
            line_over = parent_name.find_element(By.XPATH, './/following-sibling::div/div/div/div/span')
            line_over_odds = line_over.find_element(By.XPATH, './/following-sibling::span').text
            line_under = parent_name.find_element(By.XPATH, './/following-sibling::div/div/div[2]/div/span')
            line_under_odds = line_under.find_element(By.XPATH, './/following-sibling::span').text
            print(line_over.text, line_over_odds, line_under.text, line_under_odds)
            if specific_combos != '':
                if stat_checker_combos(name.text, specific_combos) < float(line_over.text[2:]) - 2:
                    print(stat_checker_combos(name.text, specific_combos))
                    print('UNDER PLACED', line_under_odds, stat_checker_combos(name.text, specific_combos))
                    bets += 1
                    picks[name.text + cats[cat]] = name.text, 'U', float(line_under.text[2:]), float(line_under_odds), \
                                                   stat_checker_combos(name.text, specific_combos), cats[cat]
                    input("Press Enter to continue...")
                elif stat_checker_combos(name.text, specific_combos) > float(line_over.text[2:]) + 2:
                    print(stat_checker_combos(name.text, specific_combos))
                    print('OVER PLACED', line_over_odds)
                    bets += 1
                    picks[name.text + cats[cat]] = name.text, 'O', float(line_over.text[2:]), float(line_over_odds), \
                                                   stat_checker_combos(name.text, specific_combos), cats[cat]
                    input("Press Enter to continue...")
                else:
                    pass
            else:
                if stat_checker(name.text, cats[cat]) < float(line_over.text[2:]) - 1:
                    print(stat_checker(name.text, cats[cat]))
                    print('UNDER PLACED', line_under_odds, stat_checker(name.text, cats[cat]))
                    bets += 1
                    picks[name.text + cats[cat]] = name.text, 'U', float(line_under.text[2:]), float(line_under_odds), \
                                                   stat_checker(name.text, cats[cat]), cats[cat]
                    input("Press Enter to continue...")
                elif stat_checker(name.text, cats[cat]) > float(line_over.text[2:]) + 1:
                    print(stat_checker(name.text, cats[cat]))
                    print('OVER PLACED', line_over_odds)
                    bets += 1
                    picks[name.text + cats[cat]] = name.text, 'O', float(line_over.text[2:]), float(line_over_odds), \
                                                   stat_checker(name.text, cats[cat]), cats[cat]
                    input("Press Enter to continue...")
                else:
                    pass

        except NoSuchElementException:
            print('Locked')
            pass
        print('##############################################')


date = '2022-1-09'
#nba_scraper()
fanduel_scraper(date)
